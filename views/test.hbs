<head>
  <style>
      audio, video {
          -moz-transition: all 1s ease;
          -ms-transition: all 1s ease;

          -o-transition: all 1s ease;
          -webkit-transition: all 1s ease;
          transition: all 1s ease;
          vertical-align: top;
      }

      input {
          border: 1px solid #d9d9d9;
          border-radius: 1px;
          font-size: 2em;
          margin: .2em;
          width: 30%;
      }

      .setup {
          border-bottom-left-radius: 0;
          border-top-left-radius: 0;
          font-size: 102%;
          height: 47px;
          margin-left: -9px;
          margin-top: 8px;
          position: absolute;
      }

      p { padding: 1em; }

      li {
          border-bottom: 1px solid rgb(189, 189, 189);
          border-left: 1px solid rgb(189, 189, 189);
          padding: .5em;
      }

      .highlight { color: rgb(0, 8, 189); }
  </style>
  <script src="/scripts/adapter.js"></script>
  <script src="https://www.webrtc-experiment.com/socket.io.js"> </script>
  <!-- <script src='/scripts/socket.io.js'></script> -->
  <script src="/scripts/IceServersHandler.js"></script>
  <script src="/scripts/PeerConnection.js"> </script>
</head>
<body>
  <article>
    <section class="experiment">
        <section>
            <span>
                Private ?? <a href="/socket.io/" target="_blank" title="Setup Private Room!"><code><strong id="unique-token">#123456789</strong></code></a>
            </span>
            <input type="text" id="your-name" placeholder="your-name">
            <button id="start-broadcasting" class="setup">Start Transmitting Yourself!</button>
        </section>
        <table id="rooms-list" style="width: 100%;"></table>
        <div id="videos-container"></div>
    </section>
    <script>
        // Documentation - https://github.com/muaz-khan/WebRTC-Experiment/tree/master/socket.io

        var channel = '{{key}}';
        var sender = Math.round(Math.random() * 999999999) + 999999999;

        // var SIGNALING_SERVER = 'https://socketio-over-nodejs2.herokuapp.com:443/';

        // var SIGNALING_SERVER = 'https://localhost:9559/';


        // var SIGNALING_SERVER = 'http://157.245.86.72:3000/';
        var SIGNALING_SERVER = 'https://aleksailosey.com:3000/';
        io.connect(SIGNALING_SERVER).emit('new-channel', {
            channel: channel,
            sender: sender
        });

        var socket = io.connect(SIGNALING_SERVER + channel);
        // socket._connectTimer = setTimeout(function() {
        //     socket.close();
        // }, 10000)
        socket.on('connect', function () {
          // clearTimeout(socket._connectTimer)
          alert('hey')
            // setup peer connection & pass socket object over the constructor!
        });

        socket.send = function (message) {
            socket.emit('message', {
                sender: sender,
                data: message
            });
        };

        // var peer = new PeerConnection('http://socketio-signaling.jit.su:80');
        var peer = new PeerConnection(socket);
        peer.onUserFound = function(userid) {
            if (document.getElementById(userid)) return;
            var tr = document.createElement('tr');

            var td1 = document.createElement('td');
            var td2 = document.createElement('td');

            td1.innerHTML = userid + ' has camera. Are you interested in video chat?';

            var button = document.createElement('button');
            button.innerHTML = 'Join';
            button.id = userid;
            button.style.float = 'right';
            button.onclick = function() {
                button = this;
                getUserMedia(function(stream) {
                    peer.addStream(stream);
                    peer.sendParticipationRequest(button.id);
                });
                button.disabled = true;
            };
            td2.appendChild(button);

            tr.appendChild(td1);
            tr.appendChild(td2);
            roomsList.appendChild(tr);
        };

        peer.onStreamAdded = function(e) {
            var video = e.mediaElement;
            video.setAttribute('width', 600);
            videosContainer.insertBefore(video, videosContainer.firstChild);

            video.play();
            rotateVideo(video);
            // scaleVideos();
        };

        peer.onStreamEnded = function(e) {
            var video = e.mediaElement;
            if (video) {
                video.style.opacity = 0;
                rotateVideo(video);
                setTimeout(function() {
                    video.parentNode.removeChild(video);
                    // scaleVideos();
                }, 1000);
            }
        };

        document.querySelector('#start-broadcasting').onclick = function() {
            this.disabled = true;
            getUserMedia(function(stream) {
                peer.addStream(stream);
                peer.startBroadcasting();
            });
        };

        document.querySelector('#your-name').onchange = function() {
            peer.userid = this.value;
        };

        var videosContainer = document.getElementById('videos-container') || document.body;
        var btnSetupNewRoom = document.getElementById('setup-new-room');
        var roomsList = document.getElementById('rooms-list');

        if (btnSetupNewRoom) btnSetupNewRoom.onclick = setupNewRoomButtonClickHandler;

        function rotateVideo(video) {
            video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(0deg)';
            setTimeout(function() {
                video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(360deg)';
            }, 1000);
        }




        // you need to capture getUserMedia yourself!
        function getUserMedia(callback) {
            // var hints = {audio:true,video:{
            //     optional: [],
            //     mandatory: {}
            // }};

            navigator.getWebcam = (navigator.getUserMedia || navigator.webKitGetUserMedia || navigator.moxGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
            navigator.getWebcam({ video: true, audio: true }, function (stream) {
              var video = document.createElement('video');
              video.srcObject = stream;
              video.controls = false;
              video.muted = true;
              peer.onStreamAdded({
                mediaElement: video,
                userid: 'self',
                stream: stream
              });
              callback(stream);
            });





        }

        (function() {
            var uniqueToken = document.getElementById('unique-token');
            if (uniqueToken)
                if (location.hash.length > 2) uniqueToken.parentNode.parentNode.parentNode.innerHTML = '<h2 style="text-align:center;"><a href="' + location.href + '" target="_blank">Share this link</a></h2>';
                else uniqueToken.innerHTML = uniqueToken.parentNode.parentNode.href = '#' + (Math.random() * new Date().getTime()).toString(36).toUpperCase().replace( /\./g , '-');
        })();

    </script>
  </article>
</body>
